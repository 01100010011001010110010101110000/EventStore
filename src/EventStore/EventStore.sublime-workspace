{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "EventStore.Core/Services/Storage/StorageReaderService.cs",
			"settings":
			{
				"buffer_size": 5226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs",
			"settings":
			{
				"buffer_size": 22874,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Services/Storage/ReaderIndex/IReadIndex.cs",
			"settings":
			{
				"buffer_size": 1601,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using EventStore.Common.Utils;\nusing EventStore.Core.TransactionLog.Checkpoint;\nusing EventStore.Core.TransactionLog.LogRecords;\n\nnamespace EventStore.Core.TransactionLog.Chunks\n{\n    public class TFChunkChaser : ITransactionFileChaser\n    {\n        public ICheckpoint Checkpoint { get { return _chaserCheckpoint; } }\n\n        private readonly ICheckpoint _chaserCheckpoint;\n        private readonly TFChunkReader _reader;\n\n        public TFChunkChaser(TFChunkDb db, ICheckpoint writerCheckpoint, ICheckpoint chaserCheckpoint)\n        {\n            Ensure.NotNull(db, \"dbConfig\");\n            Ensure.NotNull(writerCheckpoint, \"writerCheckpoint\");\n            Ensure.NotNull(chaserCheckpoint, \"chaserCheckpoint\");\n            _chaserCheckpoint = chaserCheckpoint;\n            _reader = new TFChunkReader(db, writerCheckpoint, _chaserCheckpoint.Read());\n        }\n\n        public void Open()\n        {\n            // NOOP\n        }\n\n        public bool TryReadNext(out LogRecord record)\n        {\n            var res = TryReadNext();\n            record = res.LogRecord;\n            return res.Success;\n        }\n\n        public SeqReadResult TryReadNext()\n        {\n            var res = _reader.TryReadNext();\n            if (res.Success)\n                _chaserCheckpoint.Write(res.RecordPostPosition);\n            else\n                _chaserCheckpoint.Write(_reader.CurrentPosition);\n            return res;\n        }\n\n        public void Dispose()\n        {\n            Close();\n        }\n\n        public void Close()\n        {\n            Flush();\n        }\n\n        public void Flush()\n        {\n            _chaserCheckpoint.Flush();\n        }\n    }\n}",
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs",
			"file_size": 1658,
			"file_write_time": 130411233742430447,
			"settings":
			{
				"buffer_size": 1657,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using System;\nusing System.Threading;\nusing EventStore.Common.Utils;\nusing EventStore.Core.Exceptions;\nusing EventStore.Core.TransactionLog.Checkpoint;\n\nnamespace EventStore.Core.TransactionLog.Chunks\n{\n    public class TFChunkReader : ITransactionFileReader\n    {\n        internal static long CachedReads;\n        internal static long NotCachedReads;\n\n        public const int MaxRetries = 20;\n\n        public long CurrentPosition { get { return _curPos; } }\n\n        private readonly TFChunkDb _db;\n        private readonly ICheckpoint _writerCheckpoint;\n        private long _curPos;\n\n        public TFChunkReader(TFChunkDb db, ICheckpoint writerCheckpoint, long initialPosition = 0)\n        {\n            Ensure.NotNull(db, \"dbConfig\");\n            Ensure.NotNull(writerCheckpoint, \"writerCheckpoint\");\n            Ensure.Nonnegative(initialPosition, \"initialPosition\");\n\n            _db = db;\n            _writerCheckpoint = writerCheckpoint;\n            _curPos = initialPosition;\n        }\n\n        public void Reposition(long position)\n        {\n            _curPos = position;\n        }\n\n        public SeqReadResult TryReadNext()\n        {\n            return TryReadNextInternal(0);\n        }\n\n        private SeqReadResult TryReadNextInternal(int retries)\n        {\n            while (true)\n            {\n                var pos = _curPos;\n                pos.ToCanonicalJson();\n                var writerChk = _writerCheckpoint.Read();\n                if (pos >= writerChk)\n                    return SeqReadResult.Failure;\n\n                var chunk = _db.Manager.GetChunkFor(pos);\n                RecordReadResult result;\n                try\n                {\n                    result = chunk.TryReadClosestForward(chunk.ChunkHeader.GetLocalLogPosition(pos));\n                    CountRead(chunk.IsCached);\n                }\n                catch (FileBeingDeletedException)\n                {\n                    if (retries > MaxRetries)\n                        throw new Exception(\n                            string.Format(\n                                \"Got a file that was being deleted {0} times from TFChunkDb, likely a bug there.\",\n                                MaxRetries));\n                    return TryReadNextInternal(retries + 1);\n                }\n\n                if (result.Success)\n                {\n                    _curPos = chunk.ChunkHeader.ChunkStartPosition + result.NextPosition;\n                    var postPos = result.LogRecord.LogPosition + result.RecordLength + 2 * sizeof(int);\n                    var eof = postPos == writerChk;\n                    return new SeqReadResult(\n                        true, eof, result.LogRecord, result.RecordLength, result.LogRecord.LogPosition, postPos);\n                }\n\n                // we are the end of chunk\n                _curPos = chunk.ChunkHeader.ChunkEndPosition; // the start of next physical chunk\n            }\n        }\n\n        public SeqReadResult TryReadPrev()\n        {\n            return TryReadPrevInternal(0);\n        }\n\n        private SeqReadResult TryReadPrevInternal(int retries)\n        {\n            while (true)\n            {\n                var pos = _curPos;\n                var writerChk = _writerCheckpoint.Read();\n                // we allow == writerChk, that means read the very last record\n                if (pos > writerChk)\n                    throw new Exception(string.Format(\"Requested position {0} is greater than writer checkpoint {1} when requesting to read previous record from TF.\", pos, writerChk));\n                if (pos <= 0) \n                    return SeqReadResult.Failure;\n\n                var chunk = _db.Manager.GetChunkFor(pos);\n                bool readLast = false;\n                if (pos == chunk.ChunkHeader.ChunkStartPosition) \n                {\n                    // we are exactly at the boundary of physical chunks\n                    // so we switch to previous chunk and request TryReadLast\n                    readLast = true;\n                    chunk = _db.Manager.GetChunkFor(pos - 1);\n                }\n\n                RecordReadResult result;\n                try\n                {\n                    result = readLast ? chunk.TryReadLast() : chunk.TryReadClosestBackward(chunk.ChunkHeader.GetLocalLogPosition(pos));\n                    CountRead(chunk.IsCached);\n                }\n                catch (FileBeingDeletedException)\n                {\n                    if (retries > MaxRetries)\n                        throw new Exception(string.Format(\"Got a file that was being deleted {0} times from TFChunkDb, likely a bug there.\", MaxRetries));\n                    return TryReadPrevInternal(retries + 1);\n                }\n\n                if (result.Success)\n                {\n                    _curPos = chunk.ChunkHeader.ChunkStartPosition + result.NextPosition;\n                    var postPos = result.LogRecord.LogPosition + result.RecordLength + 2 * sizeof(int);\n                    var eof = postPos == writerChk;\n                    return new SeqReadResult(true, eof, result.LogRecord, result.RecordLength, result.LogRecord.LogPosition, postPos);\n                }\n\n                // we are the beginning of chunk, so need to switch to previous one\n                // to do that we set cur position to the exact boundary position between current and previous chunk, \n                // this will be handled correctly on next iteration\n                _curPos = chunk.ChunkHeader.ChunkStartPosition;\n            }\n        }\n\n        public RecordReadResult TryReadAt(long position)\n        {\n            return TryReadAtInternal(position, 0);\n        }\n\n        private RecordReadResult TryReadAtInternal(long position, int retries)\n        {\n            var writerChk = _writerCheckpoint.Read();\n            if (position >= writerChk)\n                return RecordReadResult.Failure;\n\n            var chunk = _db.Manager.GetChunkFor(position);\n            try\n            {\n                CountRead(chunk.IsCached);\n                return chunk.TryReadAt(chunk.ChunkHeader.GetLocalLogPosition(position));\n            }\n            catch (FileBeingDeletedException)\n            {\n                if (retries > MaxRetries)\n                    throw new FileBeingDeletedException(\"Been told the file was deleted > MaxRetries times. Probably a problem in db.\");\n                return TryReadAtInternal(position, retries + 1);\n            }\n        }\n\n        public bool ExistsAt(long position)\n        {\n            return ExistsAtInternal(position, 0);\n        }\n\n        private bool ExistsAtInternal(long position, int retries)\n        {\n            var writerChk = _writerCheckpoint.Read();\n            if (position >= writerChk)\n                return false;\n\n            var chunk = _db.Manager.GetChunkFor(position);\n            try\n            {\n                CountRead(chunk.IsCached);\n                return chunk.ExistsAt(chunk.ChunkHeader.GetLocalLogPosition(position));\n            }\n            catch (FileBeingDeletedException)\n            {\n                if (retries > MaxRetries)\n                    throw new FileBeingDeletedException(\"Been told the file was deleted > MaxRetries times. Probably a problem in db.\");\n                return ExistsAtInternal(position, retries + 1);\n            }\n        }\n\n        private static void CountRead(bool isCached)\n        {\n            if (isCached)\n                Interlocked.Increment(ref CachedReads);\n            else\n                Interlocked.Increment(ref NotCachedReads);\n        }\n    }\n}",
			"file": "EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs",
			"file_size": 7517,
			"file_write_time": 130412123726970310,
			"settings":
			{
				"buffer_size": 7556,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs",
			"settings":
			{
				"buffer_size": 2400,
				"line_ending": "Unix"
			}
		},
		{
			"file": "EventStore.Core.Tests/ClientAPI/append_to_stream.cs",
			"settings":
			{
				"buffer_size": 17390,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"C#",
				"Set Syntax: C#"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": true,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Index/HashListMemTable.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Index/ISearchTable.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Index/ITableIndex.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Index/IndexEntry.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Exceptions/BadChunkInDatabaseException.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/TransactionLog/FileNamingStrategy/IFileNamingStrategy.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/ILogger.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Common/Concurrent/ConcurrentQueue.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/Messages/ClientMessage.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Messages/StorageMessage.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Exceptions/UnableToReadPastEndOfStreamException.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/ClientOperations/StartTransactionOperation.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/StreamPosition.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/StreamAcl.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core.Tests/server.p12",
		"/home/greg/src/EventStore/src/EventStore/Protos/ClientAPI/ClientMessageDtos.proto",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/Core/Messages.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Projections.v8Integration/ModuleScript.cpp",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Transport.Http/Codecs/ManualEncoding.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Projections.v8Integration/resource.h",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core.Tests/ClientAPI/read_event_should.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/Data/ReadAllResult.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/ReadDirection.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Core/TransactionLog/Chunks/TFChunkManager.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.sublime-project",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/Common/Utils/Json.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.BufferManagement/BufferPoolStream.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.sln",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/ExpectedVersion.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureWithCoreProjection.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Projections.Core.Tests/Services/core_projection/TestFixtureUtils.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.Projections.v8Integration/targetver.h",
		"/home/greg/src/EventStore/src/EventStore/EventStore.ClientAPI/Consts.cs",
		"/home/greg/src/EventStore/src/EventStore/EventStore.TestClient/ClientOptions.cs"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "EventStore.Core/Services/Storage/StorageReaderService.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5226,
						"regions":
						{
						},
						"selection":
						[
							[
								1857,
								1857
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 22874,
						"regions":
						{
						},
						"selection":
						[
							[
								8972,
								8972
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2908.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "EventStore.Core/Services/Storage/ReaderIndex/IReadIndex.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1601,
						"regions":
						{
						},
						"selection":
						[
							[
								352,
								352
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1657,
						"regions":
						{
						},
						"selection":
						[
							[
								797,
								797
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "EventStore.Core/TransactionLog/Chunks/TFChunkReader.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7556,
						"regions":
						{
						},
						"selection":
						[
							[
								996,
								996
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 290.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "EventStore.Core/Messages/TcpClientMessageDtoExtensions.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2400,
						"regions":
						{
						},
						"selection":
						[
							[
								1349,
								1398
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "EventStore.Core.Tests/ClientAPI/append_to_stream.cs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 17390,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1343.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "EventStore.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"indexrea",
				"EventStore.Core/Services/Storage/ReaderIndex/IndexReader.cs"
			],
			[
				"storageread",
				"EventStore.Core/Services/Storage/StorageReaderService.cs"
			],
			[
				"eventstore",
				"EventStore.sublime-project"
			],
			[
				"eventstore.",
				"EventStore.sublime-project"
			],
			[
				"tfch",
				"EventStore.Core/TransactionLog/Chunks/TFChunkChaser.cs"
			],
			[
				"concur",
				"EventStore.Common/Concurrent/ConcurrentQueue.cs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 258.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
